#include <stdint.h>
#include <avr/pgmspace.h>
#include "tableTypes.h"

#define jdataPin 9     //Define which pins will be used for the Shift Register control
#define jlatchPin 8
#define jclockPin 10
#define oe 11
#define PIN2 2
#define PIN3 3
#define PIN4 4
#define PIN5 5
unsigned OldSequence;

#ifdef DEBUG
int freeRam () {
  extern int __heap_start, *__brkval; 
  int v; 
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
}
#endif

void setup()
{
#ifdef DEBUG      
    Serial.begin(9600);
    Serial.print("freeRam(");
    Serial.print(freeRam());
    Serial.println(")");
    delay( 5000 );
#endif    
    randomSeed(analogRead(0));
    pinMode(jdataPin, OUTPUT);       //Configure each IO Pin
    pinMode(jlatchPin, OUTPUT);
    pinMode(jclockPin, OUTPUT);
    pinMode(oe, OUTPUT);
    digitalWrite(oe, LOW);
    
    /*digitalWrite(jlatchPin, LOW);
    for (int x = 0; x < 4; x++)  
    {             
        shiftOut(jdataPin, jclockPin, MSBFIRST, 0);        
    }  
    digitalWrite(jlatchPin, HIGH);*/
    
   
    
    OldSequence = GetSequence();
}

void loop()
{
  static int firstTime = 1;
  if (firstTime)
  {
    HelloSequence(); 
    firstTime = 0;
  }
  else
  {
    OldSequence = GetSequence();
    RunSequence(OldSequence);
    //BouncingLed();
    //KitSequence();
    //AlienSequence();                     
    //MovingLineSequence();
    //Sinwave();
    //SmileySequence();
    //PacmanSequence();
    //TestSequence();
    //AlloffSequence();
    //AllonSequence();
    //RandomSequence();
  }
}


//Start of sequences

void TestSequence()
{
  static SequenceT TestSequence; 
  static FrameT PROGMEM TestFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(11111111),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        500
      }
  };
  TestSequence.numberFrames = sizeof(TestFrames) / sizeof(FrameT);
  TestSequence.frames = &TestFrames[0];

#ifdef DEBUG
  Serial.println("TestSequence");
#endif

  PlaySequence( &(TestSequence), 10 );
}


void AlloffSequence()
{
  static SequenceT AlloffSequence; 
  static FrameT PROGMEM AlloffFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        500
      }
  };
  AlloffSequence.numberFrames = sizeof(AlloffFrames) / sizeof(FrameT);
  AlloffSequence.frames = &AlloffFrames[0];

#ifdef DEBUG
  Serial.println("AlloffSequence");
#endif

  PlaySequence( &(AlloffSequence), 10 );
}


void AllonSequence()
{
  static SequenceT AllonSequence; 
  static FrameT PROGMEM AllonFrames[] = 
    {
      {
        { 
          B(11111111),
          B(11111111),
          B(11111111),
          B(11111111),
          B(11111111),
          B(11111111),
          B(11111111),
          B(11111111)
        },
        500
      }
  };
  AllonSequence.numberFrames = sizeof(AllonFrames) / sizeof(FrameT);
  AllonSequence.frames = &AllonFrames[0];

#ifdef DEBUG
  Serial.println("AllonSequence");
#endif

  PlaySequence( &(AllonSequence), 10 );
}



void HelloSequence()
{
  
  static SequenceT HelloSequence; 
  static FrameT PROGMEM HelloFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        75
      },
      {
        { 
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001)
        },
        75
      },
      {
        { 
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011)
        },
        75
      },
      {
        { 
          B(00000110),
          B(00000110),
          B(00000110),
          B(00000111),
          B(00000111),
          B(00000110),
          B(00000110),
          B(00000110)
        },
        75
      },
      {
        { 
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001111),
          B(00001111),
          B(00001100),
          B(00001100),
          B(00001100)
        },
        75
      },
      {
        { 
          B(00011001),
          B(00011001),
          B(00011001),
          B(00011111),
          B(00011111),
          B(00011001),
          B(00011001),
          B(00011001)
        },
        75
      },
      {
        { 
          B(00110011),
          B(00110011),
          B(00110011),
          B(00111111),
          B(00111111),
          B(00110011),
          B(00110011),
          B(00110011)
        },
        75
      },
      {
        { 
          B(01100110),
          B(01100110),
          B(01100110),
          B(01111110),
          B(01111110),
          B(01100110),
          B(01100110),
          B(01100110)
        },
        75
      },
      {
        { 
          B(11001100),
          B(11001100),
          B(11001100),
          B(11111100),
          B(11111100),
          B(11001100),
          B(11001100),
          B(11001100)
        },
        75
      },
      {
        { 
          B(10011000),
          B(10011000),
          B(10011000),
          B(11111000),
          B(11111000),
          B(10011000),
          B(10011000),
          B(10011000)
        },
        75
      },
      {
        { 
          B(00110001),
          B(00110001),
          B(00110001),
          B(11110001),
          B(11110001),
          B(00110001),
          B(00110001),
          B(00110001)
        },
        75
      },
      {
        { 
          B(01100011),
          B(01100011),
          B(01100011),
          B(11100011),
          B(11100011),
          B(01100011),
          B(01100011),
          B(01100011)
        },
        75
      },
      {
        { 
          B(11000111),
          B(11000111),
          B(11000110),
          B(11000111),
          B(11000111),
          B(11000110),
          B(11000111),
          B(11000111)
        },
        75
      },
      {
        { 
          B(10001111),
          B(10001111),
          B(10001100),
          B(10001111),
          B(10001111),
          B(10001100),
          B(10001111),
          B(10001111)
        },
        75
      },
      {
        { 
          B(00011111),
          B(00011111),
          B(00011000),
          B(00011111),
          B(00011111),
          B(00011000),
          B(00011111),
          B(00011111)
        },
        75
      },
      {
        { 
          B(00111111),
          B(00111111),
          B(00110000),
          B(00111111),
          B(00111111),
          B(00110000),
          B(00111111),
          B(00111111)
        },
        75
      },
      {
        { 
          B(01111111),
          B(01111111),
          B(01100000),
          B(01111111),
          B(01111111),
          B(01100000),
          B(01111111),
          B(01111111)
        },
        75
      },
      {
        { 
          B(11111111),
          B(11111111),
          B(11000000),
          B(11111111),
          B(11111111),
          B(11000000),
          B(11111111),
          B(11111111)
        },
        75
      },
      {
        { 
          B(11111110),
          B(11111110),
          B(10000000),
          B(11111110),
          B(11111110),
          B(10000000),
          B(11111110),
          B(11111110)
        },
        75
      },
      {
        { 
          B(11111100),
          B(11111100),
          B(00000000),
          B(11111100),
          B(11111100),
          B(00000000),
          B(11111100),
          B(11111100)
        },
        75
      },
      {
        { 
          B(11111000),
          B(11111000),
          B(00000000),
          B(11111000),
          B(11111000),
          B(00000000),
          B(11111000),
          B(11111000)
        },
        75
      },
      {
        { 
          B(11110001),
          B(11110001),
          B(00000001),
          B(11110001),
          B(11110001),
          B(00000001),
          B(11110001),
          B(11110001)
        },
        75
      },
      {
        { 
          B(11100011),
          B(11100011),
          B(00000011),
          B(11100011),
          B(11100011),
          B(00000011),
          B(11100011),
          B(11100011)
        },
        75
      },
      {
        { 
          B(11000110),
          B(11000110),
          B(00000110),
          B(11000110),
          B(11000110),
          B(00000110),
          B(11000111),
          B(11000111)
        },
        75
      },
      {
        { 
          B(10001100),
          B(10001100),
          B(00001100),
          B(10001100),
          B(10001100),
          B(00001100),
          B(10001111),
          B(10001111)
        },
        75
      },
      {
        { 
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011111),
          B(00011111)
        },
        75
      },
      {
        { 
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00111111),
          B(00111111)
        },
        75
      },
      {
        { 
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01111111),
          B(01111111)
        },
        75
      },
      {
        { 
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11111111),
          B(11111111)
        },
        75
      },
      {
        { 
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(11111110),
          B(11111110)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(11111100),
          B(11111100)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(11111000),
          B(11111000)
        },
        75
      },
      {
        { 
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(11110001),
          B(11110001)
        },
        75
      },
      {
        { 
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(11100011),
          B(11100011)
        },
        75
      },
      {
        { 
          B(00000110),
          B(00000110),
          B(00000110),
          B(00000110),
          B(00000110),
          B(00000110),
          B(11000111),
          B(11000111)
        },
        75
      },
      {
        { 
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001100),
          B(10001111),
          B(10001111)
        },
        75
      },
      {
        { 
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011111),
          B(00011111)
        },
        75
      },
      {
        { 
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00111111),
          B(00111111)
        },
        75
      },
      {
        { 
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01111111),
          B(01111111)
        },
        75
      },
      {
        { 
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11111111),
          B(11111111)
        },
        75
      },
      {
        { 
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(11111110),
          B(11111110)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(11111100),
          B(11111100)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(11111000),
          B(11111000)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(11110000),
          B(11110000)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000011),
          B(00000011),
          B(00000011),
          B(11100001),
          B(11100000)
        },
        75
      },
      {
        { 
          B(00000001),
          B(00000011),
          B(00000110),
          B(00000110),
          B(00000110),
          B(00000110),
          B(11000011),
          B(11000001)
        },
        75
      },
      {
        { 
          B(00000011),
          B(00000111),
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001100),
          B(10000111),
          B(10000011)
        },
        75
      },
      {
        { 
          B(00000111),
          B(00001111),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00001111),
          B(00000111)
        },
        75
      },
      {
        { 
          B(00001111),
          B(00011111),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00011111),
          B(00001111)
        },
        75
      },
      {
        { 
          B(00011110),
          B(00111111),
          B(01100001),
          B(01100001),
          B(01100001),
          B(01100001),
          B(00111111),
          B(00011110)
        },
        75
      },
      {
        { 
          B(00111100),
          B(01111110),
          B(11000011),
          B(11000011),
          B(11000011),
          B(11000011),
          B(01111110),
          B(00111100)
        },
        75
      },
      {
        { 
          B(01111000),
          B(11111100),
          B(10000110),
          B(10000110),
          B(10000110),
          B(10000110),
          B(11111100),
          B(01111000)
        },
        75
      },
      {
        { 
          B(11110000),
          B(11111000),
          B(00001100),
          B(00001100),
          B(00001100),
          B(00001100),
          B(11111000),
          B(11110000)
        },
        75
      },
      {
        { 
          B(11100000),
          B(11110000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(11110000),
          B(11100000)
        },
        75
      },
      {
        { 
          B(11000000),
          B(11100000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(00110000),
          B(11100000),
          B(11000000)
        },
        75
      },
      {
        { 
          B(10000000),
          B(11000000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(01100000),
          B(11000000),
          B(10000000)
        },
        75
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(11000000),
          B(10000000),
          B(00000000)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(00000000),
          B(00000000)
        },
        75
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        75
      }
  };
  HelloSequence.numberFrames = sizeof(HelloFrames) / sizeof(FrameT);
  HelloSequence.frames = &HelloFrames[0];

#ifdef DEBUG
  Serial.println("HelloSequence");
#endif

  PlaySequence( &(HelloSequence), 2 );
  
}


void AlienSequence()
{
 
  static SequenceT AlienSequence; 
  static FrameT PROGMEM AlienFrames[] = 
    {
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        500
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        300
      },
      {
        { 
          B(00001100),
          B(00011111),
          B(00111111),
          B(01011110),
          B(01111111),
          B(00010010),
          B(00100001),
          B(00010010)
        },
        300
      },
      {
        { 
          B(00000110),
          B(00001111),
          B(00011111),
          B(00101111),
          B(00111111),
          B(00001001),
          B(00010000),
          B(00001001)
        },
        300
      },
      {
        { 
          B(00000011),
          B(00000111),
          B(00001111),
          B(00010111),
          B(00011111),
          B(00000100),
          B(00001000),
          B(00000100)
        },
        300
      },
      {
        { 
          B(00000001),
          B(00000011),
          B(00000111),
          B(00001011),
          B(00001111),
          B(00000010),
          B(00000100),
          B(00000010)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000101),
          B(00000111),
          B(00000001),
          B(00000010),
          B(00000001)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000010),
          B(00000011),
          B(00000000),
          B(00000001),
          B(00000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000001),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        700
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000001),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000010),
          B(00000011),
          B(00000000),
          B(00000001),
          B(00000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000101),
          B(00000111),
          B(00000001),
          B(00000010),
          B(00000001)
        },
        300
      },
      {
        { 
          B(00000001),
          B(00000011),
          B(00000111),
          B(00001011),
          B(00001111),
          B(00000010),
          B(00000100),
          B(00000010)
        },
        300
      },
      {
        { 
          B(00000011),
          B(00000111),
          B(00001111),
          B(00010111),
          B(00011111),
          B(00000100),
          B(00001000),
          B(00000100)
        },
        300
      },
      {
        { 
          B(00000110),
          B(00001111),
          B(00011111),
          B(00101111),
          B(00111111),
          B(00001001),
          B(00010000),
          B(00001001)
        },
        300
      },
      {
        { 
          B(00001100),
          B(00011111),
          B(00111111),
          B(01011110),
          B(01111111),
          B(00010010),
          B(00100001),
          B(00010010)
        },
        300
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        300
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        200
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        200
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100010),
          B(01011010),
          B(10100101)
        },
        200
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01000010),
          B(00100100)
        },
        200
      },
      {
        { 
          B(00011000),
          B(00111100),
          B(01111110),
          B(10111101),
          B(11111111),
          B(00100100),
          B(01011010),
          B(10100101)
        },
        200
      },
      {
        { 
          B(00110000),
          B(01111000),
          B(11111100),
          B(01111010),
          B(11111110),
          B(01001000),
          B(10110100),
          B(01001010)
        },
        300
      },
      {
        { 
          B(01100000),
          B(11110000),
          B(11111000),
          B(11110100),
          B(11111100),
          B(10010000),
          B(01101000),
          B(10010100)
        },
        300
      },
      {
        { 
          B(11000000),
          B(11100000),
          B(11110000),
          B(11101000),
          B(11111000),
          B(00100000),
          B(11010000),
          B(00101000)
        },
        300
      },
      {
        { 
          B(10000000),
          B(11000000),
          B(11100000),
          B(11010000),
          B(11110000),
          B(01000000),
          B(10100000),
          B(01010000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(11000000),
          B(10100000),
          B(11100000),
          B(10000000),
          B(01000000),
          B(10100000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(01000000),
          B(11000000),
          B(00000000),
          B(10000000),
          B(01000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(10000000),
          B(10000000),
          B(00000000),
          B(00000000),
          B(10000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        600
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(10000000),
          B(10000000),
          B(00000000),
          B(00000000),
          B(10000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(01000000),
          B(11000000),
          B(00000000),
          B(10000000),
          B(01000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(11000000),
          B(10100000),
          B(11100000),
          B(10000000),
          B(01000000),
          B(10100000)
        },
        300
      },
      {
        { 
          B(10000000),
          B(11000000),
          B(11100000),
          B(11010000),
          B(11110000),
          B(01000000),
          B(10100000),
          B(01010000)
        },
        300
      },
      {
        { 
          B(11000000),
          B(11100000),
          B(11110000),
          B(11101000),
          B(11111000),
          B(00100000),
          B(11010000),
          B(00101000)
        },
        300
      },
      {
        { 
          B(01100000),
          B(11110000),
          B(11111000),
          B(11110100),
          B(11111100),
          B(10010000),
          B(01101000),
          B(10010100)
        },
        300
      },
      {
        { 
          B(00110000),
          B(01111000),
          B(11111100),
          B(01111010),
          B(11111110),
          B(01001000),
          B(10110100),
          B(01001010)
        },
        300
      }     
  };
  AlienSequence.numberFrames = sizeof(AlienFrames) / sizeof(FrameT);
  AlienSequence.frames = &AlienFrames[0];

#ifdef DEBUG
  Serial.println("AlienSequence");
#endif

  PlaySequence( &(AlienSequence), 5 );
  
  
  
}


void HeartSequence()
{
 
  static SequenceT HeartSequence; 
  static FrameT PROGMEM HeartFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00010100),
          B(00111110),
          B(00111110),
          B(00011100),
          B(00001000),
          B(00000000)
        },
        500
      },
      {
        { 
          B(00000000),
          B(01100110),
          B(11111111),
          B(11111111),
          B(11111111),
          B(01111110),
          B(00111100),
          B(00011000)
        },
        500
      }
  };
  HeartSequence.numberFrames = sizeof(HeartFrames) / sizeof(FrameT);
  HeartSequence.frames = &HeartFrames[0];
  
#ifdef DEBUG
  Serial.println("HeartSequence");
#endif

  PlaySequence( &(HeartSequence), 10 );
} 





void PearsonSequence()
{
 
  static SequenceT PearsonSequence; 
  static FrameT PROGMEM PearsonFrames[] = 
    {
      {
        { 
          B(00000011),
          B(00000110),
          B(00001100),
          B(00011000),
          B(00110000),
          B(01100000),
          B(11000000),
          B(10000000)
        },
        200
      },
      {
        { 
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000),
          B(00011000)
        },
        200
      },
      {
        { 
          B(11000000),
          B(01100000),
          B(00110000),
          B(00011000),
          B(00001100),
          B(00000110),
          B(00000011),
          B(00000001)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(11111111),
          B(11111111),
          B(00000000),
          B(00000000),
          B(00000000)
        }
      }
    };
  PearsonSequence.numberFrames = sizeof(PearsonFrames) / sizeof(FrameT);
  PearsonSequence.frames = &PearsonFrames[0];

#ifdef DEBUG
  Serial.println("PearsonSequence");
#endif

  PlaySequence( &(PearsonSequence), 5 );
} 


void PsacSequence()
{
 
  static SequenceT PsacSequence; 
  static FrameT PROGMEM PsacFrames[] = 
    {
    {
      { 
        B(00011000),    //<--This is your first frame, these 8 lines represent our board.
        B(00100100),    //   The 0's are LED's that are off, the 1's are LED's that are on.
        B(01000010),    //   Change the 1's and 0's to make a "frame" then move onto the next "frame".
        B(10000001),
        B(10000001),
        B(01000010),
        B(00100100),
        B(00011000)
      },
      200		//<--This is the delay between frames in milliseconds, try to make all delays the same.
    },
    {
      { 
        B(00000000),
        B(00000000),
        B(00001000),
        B(00010100),
        B(00100010),
        B(00010100),
        B(00001000),
        B(00000000)
      },
      200
    },
    {
      { 
        B(00000000),
        B(00000000),
        B(00000000),
        B(00001000),
        B(00010100),
        B(00001000),
        B(00000000),
        B(00000000)
      },
      200
    },
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00001000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      200
    },			
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00000000),
        B(00001000),
        B(00010100),        B(00000000),
        B(00001000),
        B(00000000)
      },
      200
    },			
    {			//<--Copy from here
      { 
        B(00000000),
        B(00001000),
        B(00010100),
        B(00100010),
        B(01000001),
        B(00100010),
        B(00010100),
        B(00001000)
      },
      200
    },			
    {			//<--Copy from here
      { 
        B(00011000),
        B(00100100),
        B(01000010),
        B(10000001),
        B(10000001),
        B(01000010),
        B(00100100),
        B(00011000)
      },
      200
    },			//<--To here, and paste directly underneath to make more frames.
    {			//<--Copy from here
      { 
        B(00000000),
        B(00001000),
        B(00010100),
        B(00100010),
        B(00010100),
        B(00001000),
        B(00000000),
        B(00000000)
      },
      200
    },			
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00010000),
        B(00101000),
        B(00010000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      200
    }, 
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00000000),
        B(00001000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      200
    },						 
   };
  PsacSequence.numberFrames = sizeof(PsacFrames) / sizeof(FrameT);
  PsacSequence.frames = &PsacFrames[0];

#ifdef DEBUG
  Serial.println("PsacSequence");
#endif

  PlaySequence( &(PsacSequence), 5 );
} 


void BudreauSequence()   //<--change "thisisyourname" to whatever you want your patterns name to be.
{
 
 
  static SequenceT BudreauSequence;  //<--change "thisisyourname" to what you just put above.
  static FrameT PROGMEM BudreauFrames[] = 
  {
    {
      { 
        B(11111111),    //<--This is your first frame, these 8 lines represent our board.
        B(10000001),    //   The 0's are LED's that are off, the 1's are LED's that are on.
        B(10000001),    //   Change the 1's and 0's to make a "frame" then move onto the next "frame".
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      200		//<--This is the delay between frames in milliseconds, try to make all delays the same.
    },
    {
      { 
        B(00000000),
        B(01111110),
        B(01000010),
        B(01000010),
        B(01000010),
        B(01000010),
        B(01111110),
        B(00000000)
      },
      200
    },
    {
      { 
        B(00000000),
        B(00000000),
        B(00111100),
        B(00100100),
        B(00100100),
        B(00111100),
        B(00000000),
        B(00000000)
      },
      200
    },
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00000000),
        B(00011000),
        B(00011000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      200
    },			//<--To here, and paste directly underneath to make more frames.
    {			//<--Copy from here
      { 
        B(00000000),
        B(00000000),
        B(00111100),
        B(00100100),
        B(00100100),
        B(00111100),
        B(00000000),
        B(00000000)
      },
      200
    },
    {			//<--Copy from here
      { 
        B(00000000),
        B(01111110),
        B(01000010),
        B(01000010),
        B(01000010),
        B(01000010),
        B(01111110),
        B(00000000)
      },
     200
    }		//		//
  };
  BudreauSequence.numberFrames = sizeof(BudreauFrames) / sizeof(FrameT); //Change thisisyourname 2x
  BudreauSequence.frames = &BudreauFrames[0]; 			       //Change thisisyourname 2x

#ifdef DEBUG
  Serial.println("BudreauSequence");       //Change thisisyourname
#endif  

  PlaySequence( &(BudreauSequence), 5 );  //Change thisisyourname
}



void SmileySequence()
{
 
  static SequenceT SmileySequence; 
  static FrameT PROGMEM SmileyFrames[] = 
    {
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10100101),
          B(10011001),
          B(01000010),
          B(00111100)
        },
        700
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10000101),
          B(10000001),
          B(10100101),
          B(10011001),
          B(01000010),
          B(00111100)
        },
        200
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10100101),
          B(10011001),
          B(01000010),
          B(00111100)
        },
        700
      }
      
  };
  SmileySequence.numberFrames = sizeof(SmileyFrames) / sizeof(FrameT);
  SmileySequence.frames = &SmileyFrames[0];

#ifdef DEBUG
  Serial.println("SmileySequence");
#endif

  PlaySequence( &(SmileySequence), 5 );
} 


void SadfaceSequence()
{
 
  static SequenceT SadfaceSequence; 
  static FrameT PROGMEM SadfaceFrames[] = 
    {
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10011001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        700
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10000101),
          B(10000001),
          B(10011001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        200
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10100001),
          B(10011001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        300
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10111001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        300
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10011001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        300
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10011001),
          B(10100101),
          B(01100010),
          B(00111100)
        },
        300
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10011001),
          B(10100101),
          B(01000010),
          B(00111100)
        },
        300
      },
      
  };
  SadfaceSequence.numberFrames = sizeof(SadfaceFrames) / sizeof(FrameT);
  SadfaceSequence.frames = &SadfaceFrames[0];

#ifdef DEBUG
  Serial.println("SadfaceSequence");
#endif

  PlaySequence( &(SadfaceSequence), 5 );
} 


void PacmanSequence()
{
 
  static SequenceT PacmanSequence; 
  static FrameT PROGMEM PacmanFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000100),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(00000000),
          B(00000100),
          B(00000000),
          B(10000000),
          B(00000000)
        },
        
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(11000000),
          B(10000000),
          B(00000100),
          B(10000000),
          B(11000000),
          B(10000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(11000000),
          B(11100000),
          B(11000000),
          B(00000100),
          B(11000000),
          B(11100000),
          B(11000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(11100000),
          B(11110000),
          B(11100000),
          B(10000100),
          B(11100000),
          B(11110000),
          B(11100000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(11110000),
          B(11111000),
          B(11110000),
          B(11000100),
          B(11110000),
          B(11111000),
          B(11110000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(01111000),
          B(11111100),
          B(11111000),
          B(11100100),
          B(11111000),
          B(11111100),
          B(01111000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00111100),
          B(01111110),
          B(11111100),
          B(11110100),
          B(11111100),
          B(01111110),
          B(00111100)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00011110),
          B(00111111),
          B(01111110),
          B(11111100),
          B(01111110),
          B(00111111),
          B(00011110)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00001111),
          B(00011111),
          B(00111111),
          B(01111110),
          B(00111111),
          B(00011111),
          B(00001111)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000111),
          B(00001111),
          B(00011111),
          B(00111111),
          B(00011111),
          B(00001111),
          B(00000111)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000111),
          B(00001111),
          B(00011111),
          B(00111111),
          B(00011111),
          B(00001111),
          B(00000111)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000011),
          B(00000111),
          B(00001111),
          B(00011111),
          B(00001111),
          B(00000111),
          B(00000011)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000111),
          B(00001111),
          B(00000111),
          B(00000011),
          B(00000001)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000111),
          B(00000011),
          B(00000001),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000011),
          B(00000001),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000001),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        1000
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        400
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        500
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000000),
          B(01000000),
          B(00000000),
          B(00000001),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000001),
          B(00000011),
          B(00000001),
          B(01000000),
          B(00000001),
          B(00000011),
          B(00000001),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000011),
          B(00000111),
          B(00000011),
          B(01000000),
          B(00000011),
          B(00000111),
          B(00000011),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000111),
          B(00001111),
          B(00000111),
          B(01000001),
          B(00000111),
          B(00001111),
          B(00000111),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00001111),
          B(00011111),
          B(00001111),
          B(01000011),
          B(00001111),
          B(00011111),
          B(00001111),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00011110),
          B(00111111),
          B(00011111),
          B(01000111),
          B(00011111),
          B(00111111),
          B(00011110),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00111100),
          B(01111110),
          B(00111111),
          B(01001111),
          B(00111111),
          B(01111110),
          B(00111100),
          B(00000000)
        },
        100
      },
      {
        { 
          B(01111000),
          B(11111100),
          B(01111110),
          B(01011111),
          B(01111110),
          B(11111100),
          B(01111000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(11110000),
          B(11111000),
          B(11111100),
          B(01111110),
          B(11111100),
          B(11111000),
          B(11110000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(11100000),
          B(11110000),
          B(11111000),
          B(01111100),
          B(11111000),
          B(11110000),
          B(11100000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(11000000),
          B(11100000),
          B(11110000),
          B(11111000),
          B(11110000),
          B(11100000),
          B(11000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(10000000),
          B(11000000),
          B(11100000),
          B(11110000),
          B(11100000),
          B(11000000),
          B(10000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(11000000),
          B(11100000),
          B(11000000),
          B(10000000),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(11000000),
          B(10000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000001),
          B(10000001),
          B(00000001),
          B(00000001),
          B(00000001),
          B(00000001)
        },
        100
      },
      {
        { 
          B(00000000),
          B(00000001),
          B(00000010),
          B(00000010),
          B(00000010),
          B(00000010),
          B(00000010),
          B(00000011)
        },
        300
      },
      {
        { 
          B(00000001),
          B(00000010),
          B(00000101),
          B(00000100),
          B(00000100),
          B(00000101),
          B(00000100),
          B(00000110)
        },
        300
      },
      {
        { 
          B(00000011),
          B(00000100),
          B(00001010),
          B(00001000),
          B(00001000),
          B(00001011),
          B(00001000),
          B(00001101)
        },
        300
      },
      {
        { 
          B(00000111),
          B(00001000),
          B(00010100),
          B(00010000),
          B(00010000),
          B(00010111),
          B(00010000),
          B(00011011)
        },
        300
      },
      {
        { 
          B(00001111),
          B(00010000),
          B(00101001),
          B(00100000),
          B(00100000),
          B(00101111),
          B(00100000),
          B(00110110)
        },
        300
      },
      {
        { 
          B(00011110),
          B(00100001),
          B(01010010),
          B(01000000),
          B(01000000),
          B(01011110),
          B(01000000),
          B(01101101)
        },
        300
      },
      {
        { 
          B(00111100),
          B(01000010),
          B(10100101),
          B(10000001),
          B(10000001),
          B(10111101),
          B(10000001),
          B(11011011)
        },
        300
      },
      {
        { 
          B(01111000),
          B(00000100),
          B(01001010),
          B(00000010),
          B(00000010),
          B(01111010),
          B(00000010),
          B(10110110)
        },
        300
      },
      {
        { 
          B(11110000),
          B(00001000),
          B(10010100),
          B(00000100),
          B(00000100),
          B(11110100),
          B(00000100),
          B(01101100)
        },
        300
      },
      {
        { 
          B(11100000),
          B(00010000),
          B(00101000),
          B(00001000),
          B(00001000),
          B(11101000),
          B(00001000),
          B(01011000)
        },
        300
      },
      {
        { 
          B(11000000),
          B(00100000),
          B(01010000),
          B(00010000),
          B(00010000),
          B(11010000),
          B(00010000),
          B(10110000)
        },
        300
      },
      {
        { 
          B(10000000),
          B(01000000),
          B(10100000),
          B(00100000),
          B(00100000),
          B(10100000),
          B(00100000),
          B(01100000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(10000000),
          B(01000000),
          B(01000000),
          B(01000000),
          B(01000000),
          B(01000000),
          B(11000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000),
          B(10000000)
        },
        300
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        1000
      }
  };
  PacmanSequence.numberFrames = sizeof(PacmanFrames) / sizeof(FrameT);
  PacmanSequence.frames = &PacmanFrames[0];

#ifdef DEBUG
  Serial.println("PacmanSequence");
  Serial.println(PacmanSequence.numberFrames);
#endif

  PlaySequence( &(PacmanSequence), 5 );
} 

   
void FireworksSequence()
{
   static SequenceT FireworksSequenced; 
   static FrameT PROGMEM FireworksFrames[] = 
    {
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00100000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00100000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00100000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00100000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00100000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00100000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(01110000),
          B(01110000),
          B(01110000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(01010000),
          B(01111000),
          B(11111000),
          B(01110100),
          B(01010000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(01011000),
          B(00101000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000100)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000100),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000100),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000100),
          B(11100000),
          B(10100000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(01000100),
          B(11100000),
          B(11110000),
          B(11110000),
          B(01111000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000100),
          B(00000000),
          B(00100000),
          B(11110000),
          B(01010000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00001100),
          B(00001111),
          B(00010110),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00001010),
          B(00011110),
          B(00111111),
          B(00011111),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000110),
          B(00001110),
          B(00000100),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      },
      {
        { 
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000),
          B(00000000)
        },
        200
      }
  };
  
  FireworksSequenced.numberFrames = sizeof(FireworksFrames) / sizeof(FrameT);
  FireworksSequenced.frames = &FireworksFrames[0];

#ifdef DEBUG
  Serial.println("FireworksSequence");
#endif

  PlaySequence( &(FireworksSequenced), 5 );
} 


void MovingLineSequence()
{
 
 
  static SequenceT MovingLineSequence;

  static FrameT PROGMEM MovingLineFrames[] = 
  {
    {
      { 
        B(10000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(00000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(00000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(00000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(00000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11000000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11100000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11110000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11111000)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11111100)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11111110)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000000),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000000),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000000),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000011),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10000111),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10001111),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10011111),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(10111111),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(10000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(10000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(10000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11100001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11110001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11111001),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11111101),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000001),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000001),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000001),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11000111),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11001111),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11011111),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11000011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11000011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11000011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11110011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11111011),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100011),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100011),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100011),
        B(11100111),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11100111),
        B(11100111),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11101111),
        B(11100111),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11111111),
        B(11100111),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11111111),
        B(11110111),
        B(11100111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11111111),
        B(11110111),
        B(11110111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11111111),
        B(11110111),
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      100
    },
    {
      { 
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111),
        B(11111111)
      },
      200
    }
 };
  MovingLineSequence.numberFrames = sizeof(MovingLineFrames) / sizeof(FrameT);
  MovingLineSequence.frames = &MovingLineFrames[0];

#ifdef DEBUG
  Serial.println("MovinLineSequence");
  Serial.println(MovingLineSequence.numberFrames);
  Serial.println("freeRam()"); Serial.println(freeRam());
#endif

  PlaySequence( &(MovingLineSequence), 5 );
} 


double GetRandStars()
{
  double rNum;
  unsigned plus;

  rNum = (double) ( ( rand() % 1000 ) ) / 5000.0; // number between 0.0 and one fifth
  plus = rand() % 100;

  rNum = rNum + .05;

  if ( plus > 50 )
  {
    rNum = -rNum;
  }


  return( rNum );
}


#define NUM_STARS 25
void StarsSequence()
{
  FrameT myFrame;
  double randX[NUM_STARS], randY[NUM_STARS];
  double curX[NUM_STARS], curY[NUM_STARS];
  int i;
  int j;

  for ( j = 0; j < NUM_STARS; j++ )
  {
    curX[j] = 4.0;
    curY[j] = 4.0;
    randX[j] = GetRandStars();
    randY[j] = GetRandStars();
  }

  myFrame.delay = 60;

  for ( i = 0; i < 500; i++ )
  {
    FrameSet( &myFrame, OFF );

    for ( j = 0; j < NUM_STARS; j++ )
    {
      curX[j] = curX[j] + randX[j];
      curY[j] = curY[j] + randY[j];

      if ( ( curX[j] < 0 ) || ( curY[j] < 0 ) ||
           ( curX[j] >= 8.0 ) || ( curY[j] >= 8.0 ) )
      {
        curX[j] = 4.0;
        curY[j] = 4.0;
        randX[j] = GetRandStars();
        randY[j] = GetRandStars();
      }

      LedSet( &myFrame, (int) curX[j], (int) curY[j], ON );
    }
    DisplayFrameSRAM( &myFrame );
    
    
    //printf( "(%0d, %0d)\n", (int) curX, (int) curY );
  }
  if ((i % 50) == 0)
    {
    
      if ( OldSequence != GetSequence() )
      {
         return;
      }      
    } 
          
          

}


double GetRandMatrix()
{
  double rNum;
  unsigned plus;

  rNum = (double) ( ( rand() % 1000 ) ) / 5000.0; // number between 0.0 and one fifth
  plus = rand() % 100;

  rNum = rNum + .05;

  return( rNum );
}


#define NUM_MATRIX 25
void MatrixSequence()
{
  FrameT myFrame;
  double randX[NUM_MATRIX], randY[NUM_MATRIX];
  double curX[NUM_MATRIX], curY[NUM_MATRIX];
  int i;
  int j;
  int k;

  for ( j = 0; j < NUM_MATRIX; j++ )
  {
    curY[j] = (double) (rand() % 8);
    curX[j] = (double) (rand() % 8);
  
    randX[j] = 0.0;
    randY[j] = GetRandMatrix();
  }

  myFrame.delay = 60;

  for ( i = 0; i < 600; i++ )
  {
    FrameSet( &myFrame, OFF );

    for ( j = 0; j < NUM_MATRIX; j++ )
    {
      curY[j] = curY[j] + randY[((int)curX[j] % 8)];

      if ( ( curX[j] < 0 ) || ( curY[j] < 0 ) ||
           ( curX[j] >= 8.0 ) || ( curY[j] >= 8.0 ) )
      {
        curX[j] = (double) (rand() % 8);
        curY[j] = 0.0;
        randX[j] = 0.0;
        //randY[j] = GetRandMatrix();
      }

      LedSet( &myFrame, (int) curX[j], (int) curY[j], ON );
    }
    DisplayFrameSRAM( &myFrame );
    
    if ((i % 50) == 0)
    {
    
      if ( OldSequence != GetSequence() )
      {
         return;
      }      
    }
    //printf( "(%0d, %0d)\n", (int) curX, (int) curY );
  }

}



void KitSequence()
{ 
  int seq1[] = {6,129,66,36,24,36,66};						// byte #2 value

  
      for (int x = 0; x < seq1[0]; x++)         //Array Index
      {
          digitalWrite(jlatchPin, LOW);  
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          shiftOut(jdataPin, jclockPin, MSBFIRST, seq1[x+1]);
          digitalWrite(jlatchPin, HIGH);
 
          if ( OldSequence != GetSequence() )
          {
            return;
          }   
          
          delay(200);
      }
  
}



double GetRand()
{
  double rNum;

  rNum = (double) ( ( rand() % 1000 ) ) / 3000.0; // number between 0.0 and 0.3333

  rNum = rNum + 0.4;  // range is .4->.733

  return( rNum );
}



#define NUM_BALLS 5
void BouncingLed()
{
  FrameT myFrame;
  double randX[NUM_BALLS], randY[NUM_BALLS];
  double curX[NUM_BALLS], curY[NUM_BALLS];
  int i;
  int j;
  int k;

  for ( j = 0; j < NUM_BALLS; j++ )
  {
    curX[j] = 4.0;
    curY[j] = 4.0;
    randX[j] = GetRand();
    randY[j] = GetRand();
  }

  myFrame.delay = 60;

  for ( i = 0; i < 1000; i++ )
  {
    FrameSet( &myFrame, OFF );

    for ( j = 0; j < NUM_BALLS; j++ )
    {
      curX[j] = curX[j] + randX[j];
      curY[j] = curY[j] + randY[j];

      if ( curX[j] < 0 )
      {
        curX[j] = 0;
        randX[j] = GetRand();
      }
      if ( curY[j] < 0 )
      {
        curY[j] = 0;
        randY[j] = GetRand();
      }
      if ( curX[j] >= 8.0 )
      {
        curX[j] = 7.99;
        randX[j] = -GetRand();
      }
      if ( curY[j] >= 8.0 )
      {
        curY[j] = 7.99;
        randY[j] = -GetRand();
      }

      LedSet( &myFrame, (int) curX[j], (int) curY[j], ON );
      
      if ((i % 50) == 0)
      {
    
        if ( OldSequence != GetSequence() )
        {
           return;
        }      
       }
    }
    DisplayFrameSRAM( &myFrame );
    //printf( "(%0d, %0d)\n", (int) curX, (int) curY );
    
   
    
  }
  

}


void Sinwave()
{
  FrameT myFrame;
  int i;
  int x;
  int y;
  float amplitude;
  float period;
  float offset;

  myFrame.delay = 50;

  amplitude = 3.5;
  period = 0.01;
  offset = 4.0;

  for ( i = 0; i < 900; i++ )
  {
    FrameSet( &myFrame, OFF );
    for ( x = 0; x < 8; x++ )
    {
      y = (int) (amplitude * sin(( (float) x ) * period) + offset);
      for ( ; y < 8; y++ )
      {
        LedSet( &myFrame, x, y, ON );
      }

    }

    DisplayFrameSRAM( &myFrame );
    //printf( "(%0d, %0d)\n", x, y );
    period = period + 0.07;
    
    if ( OldSequence != GetSequence() )
    {
      return;
    }
  }

}


void RandomSequence()
{
  unsigned val;
  
  val = random(1,15);
  
  RunSequence(val);
}



//End of sequences

void LedSet( FrameT *frame, int x, int y, int onOff )
{
  unsigned nBit = 0x80; // 10000000;
  
  if ( ( x < 0 ) || ( x > 7 ) || ( y < 0 ) || ( y > 7 ) )
  {
#ifdef DEBUG
  Serial.print("LedSet(): Bad x,y = (");
  Serial.print(x);
  Serial.print(",");
  Serial.println(y);
#endif

    return;  // Bad position
  }
  
  #ifdef DEBUG
  Serial.print("LedSet(): x,y = (");
  Serial.print(x);
  Serial.print(",");
  Serial.println(y);
#endif

  if ( onOff == ON )
  {
    frame->frameData[y] = frame->frameData[y] | ( nBit >> x );
  }
  else
  {
    nBit = ~( nBit >> x );
    frame->frameData[y] = frame->frameData[y] & nBit;
  }
}




void FrameSet( FrameT *frame, int onOff )
{
  int i;

  for ( i = 0; i < 8; i++ )
  {
    if ( onOff == ON )
    {
      frame->frameData[i] = 0xff;
    }
    else
    {
      frame->frameData[i] = 0;
    }
  }
}




void DisplayFrameFlash( FrameT *frame )
{
  int i;
  int row;

  int frameDelay = pgm_read_word_near( &( frame->delay ) );

#ifdef DEBUG
  Serial.print("Frame delay ");
  Serial.println( frameDelay );
  for ( row = 0; row < 8; row++ )
  {
    Serial.print( "frame->frameData[" );
    Serial.print( row );
    Serial.print( "] = " );
    Serial.println( pgm_read_byte_near( &(frame->frameData[row] ) ) );
  }
#endif


  digitalWrite( jlatchPin, LOW );

  for ( row = 7; row >= 0; row = row - 2 )
  {
    shiftOut( jdataPin, jclockPin, MSBFIRST, pgm_read_byte_near( &(frame->frameData[row]) ));
    shiftOut( jdataPin, jclockPin, LSBFIRST, pgm_read_byte_near( &(frame->frameData[row-1]) ));
  }
  digitalWrite(jlatchPin, HIGH);
  delay( frameDelay );  


}


void DisplayFrameSRAM( FrameT *frame )
{
  int i;
  int row;

  int frameDelay =  frame->delay;

#ifdef DEBUG
  Serial.print("Frame delay ");
  Serial.println( frameDelay );
  for ( row = 0; row < 8; row++ )
  {
    Serial.print( "frame->frameData[" );
    Serial.print( row );
    Serial.print( "] = " );
    Serial.println( frame->frameData[row] );
  }
#endif


  digitalWrite( jlatchPin, LOW );

  for ( row = 7; row >= 0; row = row - 2 )
  {
    shiftOut( jdataPin, jclockPin, MSBFIRST, frame->frameData[row]   );
    shiftOut( jdataPin, jclockPin, LSBFIRST, frame->frameData[row-1] );
  }
  digitalWrite(jlatchPin, HIGH);
  delay( frameDelay );  


}




void PlaySequence( SequenceT *pSequence, int numberLoops )
{
  int nFrames;
  int nLoops;


#ifdef DEBUG
  Serial.print("Number of Frames ");
  Serial.println(pSequence->numberFrames);
#endif

  for ( nLoops = 0; nLoops < numberLoops ; nLoops++ )
  {
#ifdef DEBUG
  Serial.print("Loop ");
  Serial.print(nLoops+1);
  Serial.print(" of ");
  Serial.println(numberLoops);
#endif 
    for ( nFrames = 0; nFrames < pSequence->numberFrames; nFrames++ )
    {
      DisplayFrameFlash( &(pSequence->frames[nFrames]) );


    }
    if ( OldSequence != GetSequence() )
    {
      return;
    } 
  } 

}



unsigned GetSequence()
{
  unsigned val;
  


  val = digitalRead(PIN5) | 
      ( digitalRead(PIN4) << 1 ) | 
      ( digitalRead(PIN3) << 2 ) |
      ( digitalRead(PIN2) << 3 );

     
     
  return( val );
  
}


void RunSequence(unsigned val)
{
  
  
  switch( val ) 
  {
   case 0:
   {
     AlloffSequence();
     break;
   } 
   
   case 1:
   {
     BouncingLed();
     break;
   }
   
   case 2:
   {
     AlienSequence();
     break;
   }
   
   case 3:
   {
     HeartSequence();
     break;
   }
   
   case 4:
   {
     
     MovingLineSequence();
     
     break;
   }
   
   case 5:
   {
     Sinwave();
     break;
   }
   
   case 6:
   {
     StarsSequence();
     break;
   }
   
   case 7:
   {
     PacmanSequence();
     break;
   }
   
   case 8:
   {
     SmileySequence();
     break;
   }
   
   case 9:
   {
     SadfaceSequence();
     break;
   }
   
   case 10:
   {
     FireworksSequence();
     break;
   }
   
   case 11:
   {
     BudreauSequence();
     break;
   }
   
   case 12:
   {
     PsacSequence();
     break;
   }
   
   case 13:
   {
     PearsonSequence();
     break;
   }
   
   case 14:
   {
     MatrixSequence();
     break;
   }
   
   case 15:
   {
     RandomSequence();
     break;
   }
   
   default:
   {
    break; 
   }
  }
  
}


